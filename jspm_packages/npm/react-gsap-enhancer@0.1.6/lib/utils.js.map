{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":";;;;;;;;;;;AAAO,SAAS,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE;AAC/C,WAAS,IAAI,CAAC,GAAG,EAAE;AACjB,OAAG,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAClB,UAAI,IAAI,CAAC,IAAI,EAAE;AACb,gBAAQ,CAAC,IAAI,CAAC,CAAA;AACd,YAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SACpB;OACF;KACF,CAAC,CAAA;GACH;AACD,MAAI,CAAC,QAAQ,CAAC,CAAA;CACf;;AAEM,SAAS,WAAW,CAAC,QAAQ,EAAE,iBAAiB,EAAE;AACvD,uBAAqB,CAAC,QAAQ,CAAC,CAAA;AAC/B,WAAS,CAAC,iBAAiB,CAAC,CAAA;CAC7B;;AAEM,SAAS,SAAS,CAAC,iBAAiB,EAAE;AAC3C,mBAAiB,CAAC,OAAO,CAAC,UAAA,SAAS;WAAI,SAAS,CAAC,MAAM,EAAE;GAAA,CAAC,CAAA;CAC3D;;AAEM,SAAS,qBAAqB,CAAC,QAAQ,EAAE;AAC9C,cAAY,CAAC,QAAQ,EAAE,UAAA,IAAI,EAAI;AAC7B,QAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;;AAE7D,uBAAmB,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAClC,UAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAA;KACzD,CAAC,CAAA;;AAEF,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACpD,UAAM,KAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;AACzC,UAAI,mBAAmB,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5C,YAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAI,CAAC,CAAA;AAC/B,UAAE,CAAC,CAAA;OACJ;KACF;GACF,CAAC,CAAA;CACH;;AAEM,SAAS,kBAAkB,CAAC,QAAQ,EAAE;AAC3C,cAAY,CAAC,QAAQ,EAAE,UAAA,IAAI,EAAI;AAC7B,QAAI,CAAC,eAAe,GAAG,EAAE,CAAA;AACzB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACpD,UAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;AACzC,UAAM,MAAI,GAAG,SAAS,CAAC,IAAI,CAAA;AAC3B,UAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAA;AAC7B,UAAI,CAAC,eAAe,CAAC,MAAI,CAAC,GAAG,KAAK,CAAA;KACnC;AACD,QAAI,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;AAC7B,QAAI,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;GAC5B,CAAC,CAAA;CACH","file":"utils.js","sourcesContent":["export function walkItemTree(itemTree, callback) {\n  function walk(map) {\n    map.forEach(item => {\n      if (item.node) {\n        callback(item)\n        if (item.children) {\n          walk(item.children)\n        }\n      }\n    })\n  }\n  walk(itemTree)\n}\n\nexport function reattachAll(itemTree, runningAnimations) {\n  restoreRenderedStyles(itemTree)\n  attachAll(runningAnimations)\n}\n\nexport function attachAll(runningAnimations) {\n  runningAnimations.forEach(animation => animation.attach())\n}\n\nexport function restoreRenderedStyles(itemTree) {\n  walkItemTree(itemTree, item => {\n    const savedAttributeNames = Object.keys(item.savedAttributes)\n    //restore the original attribute values\n    savedAttributeNames.forEach(name => {\n      item.node.setAttribute(name, item.savedAttributes[name])\n    })\n    //remove the attributes added after the render\n    for (let i = 0; i < item.node.attributes.length; ++i) {\n      const name = item.node.attributes[i].name\n      if (savedAttributeNames.indexOf(name) === -1) {\n        item.node.removeAttribute(name)\n        --i\n      }\n    }\n  })\n}\n\nexport function saveRenderedStyles(itemTree) {\n  walkItemTree(itemTree, item => {\n    item.savedAttributes = {}\n    for (let i = 0; i < item.node.attributes.length; ++i) {\n      const attribute = item.node.attributes[i]\n      const name = attribute.name\n      const value = attribute.value\n      item.savedAttributes[name] = value\n    }\n    item.node._gsTransform = null\n    item.node._gsTweenID = null\n  })\n}\n"]}